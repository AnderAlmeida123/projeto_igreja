// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model pessoa {
  id                    String       @id @unique @default(uuid())
  nome                  String       @db.VarChar(255)
  cpf                   String       @unique @db.Char(11)
  dataNascimento        DateTime     @db.Date()
  sexo                  String
  endereco              endereco[]
  contato               contato[]
  sacramento            sacramento[]
  comunidadeResponsavel comunidade[] @relation("ResponsavelComunidade")
  comunidade            comunidade   @relation("MembroComunidade", fields: [comunidadeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comunidadeId          String
}

model contato {
  id         String @id @unique @default(uuid())
  celular    String @db.Char(11)
  telContato String @db.Char(11)
  email      String @db.VarChar(100)
  pessoa     pessoa @relation(fields: [pessoaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pessoaId   String
}

model endereco {
  id         String  @id @unique @default(uuid())
  cep        String  @db.Char(9)
  estado     String  @db.VarChar(255)
  cidade     String  @db.VarChar(255)
  bairro     String  @db.VarChar(255)
  rua        String  @db.VarChar(255)
  numero     String  @db.Char(5)
  referencia String?
  pessoa     pessoa  @relation(fields: [pessoaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pessoaId   String
}

model sacramento {
  id                 String         @id @unique @default(uuid())
  localSacramento    String         @db.Text
  dataHoraSacramento DateTime       @db.Timestamp()
  pessoa             pessoa         @relation(fields: [pessoaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pessoaId           String
  tipoSacramento     tipoSacramento @relation(fields: [tipoSacramentoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tipoSacramentoId   String
}

model tipoSacramento {
  id             String       @id @unique @default(uuid())
  tipoSacramento String       @db.VarChar(255)
  sacramento     sacramento[]
}

model comunidade {
  id             String       @id @unique @default(uuid())
  nomeComunidade String       @db.VarChar(100)
  bairro         String       @db.VarChar(100)
  membros        pessoa[]     @relation("MembroComunidade")
  responsavel    pessoa?      @relation("ResponsavelComunidade", fields: [responsavelId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  responsavelId  String?
  calendarios    calendario[]
}

model calendario {
  id           String     @id @unique @default(uuid())
  tipoEvento   String     @db.Text
  dataHora     DateTime   @db.Timestamp()
  tituloEvento String     @db.VarChar(255)
  descricao    String     @db.Text
  comunidade   comunidade @relation(fields: [comunidadeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comunidadeId String
  tipoDoEvento tipoEvento @relation(fields: [tipoEventoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tipoEventoId String
}

model tipoEvento {
  id         String       @id @unique @default(uuid())
  tipoEvento String       @db.VarChar(255)
  calendario calendario[]
}
