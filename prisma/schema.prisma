// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model pessoa {
  id             String        @id @unique @default(uuid())
  nome           String        @db.VarChar(255)
  cpf            String        @unique @db.Char(11)
  dataNascimento DateTime      @db.Date()
  sexo           String
  endereco       endereco[]
  contato        contato[]
  comunidade     comunidade[]
  sacramento     sacramento[]
  setor          setor[]
  membroSetor    membroSetor[]
  turma          turma[]
  membrosTurma   membroTurma[]
}

model contato {
  id         String @id @unique @default(uuid())
  celular    String @db.Char(11)
  telContato String @db.Char(11)
  email      String @db.VarChar(100)
  pessoa     pessoa @relation(fields: [pessoaId], references: [id])
  pessoaId   String
}

model endereco {
  id         String  @id @unique @default(uuid())
  cep        String  @db.Char(9)
  estado     String  @db.VarChar(255)
  cidade     String  @db.VarChar(255)
  bairro     String  @db.VarChar(255)
  rua        String  @db.VarChar(255)
  numero     String  @db.Char(5)
  referencia String?
  pessoa     pessoa  @relation(fields: [pessoaId], references: [id])
  pessoaId   String
}

model sacramento {
  id                 String         @id @unique @default(uuid())
  localSacramento    String         @db.Text
  dataHoraSacramento DateTime       @db.Timestamp()
  pessoa             pessoa         @relation(fields: [pessoaId], references: [id])
  pessoaId           String
  tipoSacramento     tipoSacramento @relation(fields: [tipoSacramentoId], references: [id])
  tipoSacramentoId   String
}

model tipoSacramento {
  id             String       @id @unique @default(uuid())
  tipoSacramento String       @db.VarChar(255)
  sacramento     sacramento[]
}

model comunidade {
  id            String       @id @unique @default(uuid())
  comunidade    String       @db.VarChar(100)
  bairro        String       @db.VarChar(100)
  pessoa        pessoa       @relation(fields: [responsavelId], references: [id])
  responsavelId String       @db.VarChar(100)
  calendario    calendario[]
  setor         setor[]
}

model calendario {
  id           String     @id @unique @default(uuid())
  tipoEvento   String     @db.Text
  dataHora     DateTime   @db.Timestamp()
  tituloEvento String     @db.VarChar(255)
  descricao    String     @db.Text
  comunidade   comunidade @relation(fields: [comunidadeId], references: [id])
  comunidadeId String
  evento       tipoEvento @relation(fields: [tipoEventoId], references: [id])
  tipoEventoId String
}

model tipoEvento {
  id         String       @id @unique @default(uuid())
  tipoEvento String       @db.VarChar(255)
  calendario calendario[]
}

model setor {
  id           String        @id @unique @default(uuid())
  descricao    String        @db.Text
  setor        String        @db.VarChar(255)
  pessoa       pessoa        @relation(fields: [reponsavel], references: [id])
  reponsavel   String        @db.VarChar(100)
  comunidade   comunidade    @relation(fields: [comunidadeId], references: [id])
  comunidadeId String
  membroSetor  membroSetor[]
  turma        turma[]
}

model membroSetor {
  id          String   @id @unique @default(uuid())
  dataEntrada DateTime @db.Date
  dataSaida   DateTime @db.Date
  setor       setor    @relation(fields: [setorId], references: [id])
  setorId     String
  pessoa      pessoa   @relation(fields: [membrosId], references: [id])
  membrosId   String
}

model turma {
  id          String        @id @unique @default(uuid())
  dataInicio  DateTime      @db.Date
  dataTermino DateTime      @db.Date
  turma       String        @db.VarChar(255)
  pessoa      pessoa        @relation(fields: [profId], references: [id])
  profId      String
  setor       setor         @relation(fields: [setorId], references: [id])
  setorId     String
  membroTurma membroTurma[]
}

model membroTurma {
  id            String @id @default(uuid())
  pessoa        pessoa @relation(fields: [membroTurmaId], references: [id])
  membroTurmaId String
  turma         turma  @relation(fields: [turmaId], references: [id])
  turmaId       String
}
